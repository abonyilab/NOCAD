function [ data ] = robust( data )
%ROBUST examines the robustness of the system created by the five methods
% that are grant required relative degree. The input of the function is the
% extended struct generated by extendData. The method remove one node from
% the network, then analyse if the system still controllable (or
% observable). The proportion of this is also returned in percent. The
% critical nodes also returned, that if removed, then controllability (or
% observability) violated.
% Output: the extended data with the following field
% data.
%    robustness.
%       methods
%       actRob
%       senRob
%       actCriticalNodes
%       senCriticalNodes
% ##################
% Example:
% ##################
% Inputs:
%
% data = matricesToStruct(Amatrix,Bmatrix,Cmatrix,Dmatrix,mesConfig); % see more in matricesToStruct 
% targetDegree = 2;
% alphaPar = 0.5;
% data = extendData(data, targetDegree, alphaPar);
% ##################
% Function Calling:
% 
% [ data ] = robust( data );
% ##################
% Output:
%
% data1 = 
%         system: [1x1 struct]
%           node: [1x1 struct]
%           edge: [1x1 struct]
%       improved: [1x1 struct]
%     robustness: [1x1 struct]
% ##################
%  The algorithm was implemented by Daniel Leitold 

% methods: 
% Cov - set covering
% CovRet - set covering retrofit
% NetMesRet - network centrality measures
% mCLASA - modified CLASA
% GDFCMSA - fuzzy c-means
methods = {'Cov', 'CovRet', 'NetMesRet', 'mCLASA', 'GDFCMSA'};
numOfMet = length(methods);

%%%%%%%%%%%
% declare %
%%%%%%%%%%%
% vectors: cols: methods
% value: count, system still controllable/observable.
actRob = zeros(1, numOfMet);
senRob = zeros(1, numOfMet);
% vectors: row: HEN from networkNames, cols: method
% value: critical nodes: if it is removed, system lost controllability/obs.
actCriticalNodes = cell(1, numOfMet);
senCriticalNodes = cell(1, numOfMet);


improved = data.improved;

numOfNodes = data.system.measure.numOfNodes;
% adjacency, not state-transition
adj = data.system.describe.effectGraph;

driversCov = improved.actCov;
driversCovRet = improved.actCovRet;
driversNetMesRet = improved.actNetMesRet;
driversmCLASA = improved.actmCLASA;
driversGDFCMSA = improved.actGDFCMSA;

sensorsCov = improved.senCov;
sensorsCovRet = improved.senCovRet;
sensorsNetMesRet = improved.senNetMesRet;
sensorsmCLASA = improved.senmCLASA;
sensorsGDFCMSA = improved.senGDFCMSA;

for nodeID = 1:numOfNodes
    adjTmp = adj;
    adjTmp(:,nodeID) = [];
    adjTmp(nodeID,:) = [];

    %%%%%%%%%%%
    % drivers %
    %%%%%%%%%%%
    driversCovTmp = driversCov;
    driversCovTmp(driversCovTmp==nodeID) = [];
    idx = driversCovTmp>nodeID;
    driversCovTmp(idx) = driversCovTmp(idx) - 1;

    driversCovRetTmp = driversCovRet;
    driversCovRetTmp(driversCovRetTmp==nodeID) = [];
    idx = driversCovRetTmp>nodeID;
    driversCovRetTmp(idx) = driversCovRetTmp(idx) - 1;

    driversNetMesRetTmp = driversNetMesRet;
    driversNetMesRetTmp(driversNetMesRetTmp==nodeID) = [];
    idx = driversNetMesRetTmp>nodeID;
    driversNetMesRetTmp(idx) = driversNetMesRetTmp(idx) - 1;

    driversmCLASATmp = driversmCLASA;
    driversmCLASATmp(driversmCLASATmp==nodeID) = [];
    idx = driversmCLASATmp>nodeID;
    driversmCLASATmp(idx) = driversmCLASATmp(idx) - 1;

    driversGDFCMSATmp = driversGDFCMSA;
    driversGDFCMSATmp(driversGDFCMSATmp==nodeID) = [];
    idx = driversGDFCMSATmp>nodeID;
    driversGDFCMSATmp(idx) = driversGDFCMSATmp(idx) - 1;

    % 1
    isC1 = isCont(adjTmp, driversCovTmp);
    actRob(1) = actRob(1) + isC1;
    if (~isC1)
        actCriticalNodes{1} = cat(2,actCriticalNodes{1},nodeID); 
    end

    % 2
    if isequal(union(driversCovTmp, driversCovRetTmp), intersect(driversCovTmp, driversCovRetTmp))
        isC2 = isC1;
    else
        isC2 = isCont(adjTmp, driversCovRetTmp);
    end
    actRob(2) = actRob(2) + isC2;
    if (~isC2)
        actCriticalNodes{2} = cat(2,actCriticalNodes{2},nodeID); 
    end

    % 3
    if isequal(union(driversCovTmp, driversNetMesRetTmp), intersect(driversCovTmp, driversNetMesRetTmp))
        isC3 = isC1;
    else if isequal(union(driversCovRetTmp, driversNetMesRetTmp), intersect(driversCovRetTmp, driversNetMesRetTmp))
            isC3 = isC2;
        else
            isC3 = isCont(adjTmp, driversNetMesRetTmp);
        end
    end
    actRob(3) = actRob(3) + isC3;
    if (~isC3)
        actCriticalNodes{3} = cat(2,actCriticalNodes{3},nodeID); 
    end

    % 4
    if isequal(union(driversCovTmp, driversmCLASATmp), intersect(driversCovTmp, driversmCLASATmp))
        isC4 = isC1;
    else if isequal(union(driversCovRetTmp, driversmCLASATmp), intersect(driversCovRetTmp, driversmCLASATmp))
            isC4 = isC2;
        else if isequal(union(driversNetMesRetTmp, driversmCLASATmp), intersect(driversNetMesRetTmp, driversmCLASATmp))
                isC4 = isC3;
            else
                isC4 = isCont(adjTmp, driversmCLASATmp);
            end
        end
    end
    actRob(4) = actRob(4) + isC4;
    if (~isC4)
        actCriticalNodes{4} = cat(2,actCriticalNodes{4},nodeID); 
    end

    % 5
    if isequal(union(driversCovTmp, driversGDFCMSATmp), intersect(driversCovTmp, driversGDFCMSATmp))
        isC5 = isC1;
    else if isequal(union(driversCovRetTmp, driversGDFCMSATmp), intersect(driversCovRetTmp, driversGDFCMSATmp))
            isC5 = isC2;
        else if isequal(union(driversNetMesRetTmp, driversGDFCMSATmp), intersect(driversNetMesRetTmp, driversGDFCMSATmp))
                isC5 = isC3;
            else if isequal(union(driversmCLASATmp, driversGDFCMSATmp), intersect(driversmCLASATmp, driversGDFCMSATmp))
                    isC5 = isC4;
                else
                    isC5 = isCont(adjTmp, driversGDFCMSATmp);
                end
            end
        end
    end
    actRob(5) = actRob(5) + isC5;
    if (~isC5)
        actCriticalNodes{5} = cat(2,actCriticalNodes{5},nodeID); 
    end


    %%%%%%%%%%%
    % sensors %
    %%%%%%%%%%%
    sensorsCovTmp = sensorsCov;
    sensorsCovTmp(sensorsCovTmp==nodeID) = [];
    idx = sensorsCovTmp>nodeID;
    sensorsCovTmp(idx) = sensorsCovTmp(idx) - 1;

    sensorsCovRetTmp = sensorsCovRet;
    sensorsCovRetTmp(sensorsCovRetTmp==nodeID) = [];
    idx = sensorsCovRetTmp>nodeID;
    sensorsCovRetTmp(idx) = sensorsCovRetTmp(idx) - 1;

    sensorsNetMesRetTmp = sensorsNetMesRet;
    sensorsNetMesRetTmp(sensorsNetMesRetTmp==nodeID) = [];
    idx = sensorsNetMesRetTmp>nodeID;
    sensorsNetMesRetTmp(idx) = sensorsNetMesRetTmp(idx) - 1;

    sensorsmCLASATmp = sensorsmCLASA;
    sensorsmCLASATmp(sensorsmCLASATmp==nodeID) = [];
    idx = sensorsmCLASATmp>nodeID;
    sensorsmCLASATmp(idx) = sensorsmCLASATmp(idx) - 1;

    sensorsGDFCMSATmp = sensorsGDFCMSA;
    sensorsGDFCMSATmp(sensorsGDFCMSATmp==nodeID) = [];
    idx = sensorsGDFCMSATmp>nodeID;
    sensorsGDFCMSATmp(idx) = sensorsGDFCMSATmp(idx) - 1;

%         senRob(id,1) = senRob(id,1) + isObs(adjTmp, sensorsCovTmp);
%         senRob(id,2) = senRob(id,2) + isObs(adjTmp, sensorsCovRetTmp);
%         senRob(id,3) = senRob(id,3) + isObs(adjTmp, sensorsNetMesRetTmp);
%         senRob(id,4) = senRob(id,4) + isObs(adjTmp, sensorsmCLASATmp);
%         senRob(id,5) = senRob(id,5) + isObs(adjTmp, sensorsGDFCMSATmp);

    % 1
    isO1 = isObs(adjTmp, sensorsCovTmp);
    senRob(1) = senRob(1) + isO1;
    if (~isO1)
        senCriticalNodes{1} = cat(2,senCriticalNodes{1},nodeID); 
    end

    % 2
    if isequal(union(sensorsCovTmp, sensorsCovRetTmp), intersect(sensorsCovTmp, sensorsCovRetTmp))
        isO2 = isO1;
    else
        isO2 = isObs(adjTmp, sensorsCovRetTmp);
    end
    senRob(2) = senRob(2) + isO2;
    if (~isO2)
        senCriticalNodes{2} = cat(2,senCriticalNodes{2},nodeID); 
    end

    % 3
    if isequal(union(sensorsCovTmp, sensorsNetMesRetTmp), intersect(sensorsCovTmp, sensorsNetMesRetTmp))
        isO3 = isO1;
    else if isequal(union(sensorsCovRetTmp, sensorsNetMesRetTmp), intersect(sensorsCovRetTmp, sensorsNetMesRetTmp))
            isO3 = isO2;
        else
            isO3 = isObs(adjTmp, sensorsNetMesRetTmp);
        end
    end
    senRob(3) = senRob(3) + isO3;
    if (~isO3)
        senCriticalNodes{3} = cat(2,senCriticalNodes{3},nodeID); 
    end

    % 4
    if isequal(union(sensorsCovTmp, sensorsmCLASATmp), intersect(sensorsCovTmp, sensorsmCLASATmp))
        isO4 = isO1;
    else if isequal(union(sensorsCovRetTmp, sensorsmCLASATmp), intersect(sensorsCovRetTmp, sensorsmCLASATmp))
            isO4 = isO2;
        else if isequal(union(sensorsNetMesRetTmp, sensorsmCLASATmp), intersect(sensorsNetMesRetTmp, sensorsmCLASATmp))
                isO4 = isO3;
            else
                isO4 = isObs(adjTmp, sensorsmCLASATmp);
            end
        end
    end
    senRob(4) = senRob(4) + isO4;
    if (~isO4)
        senCriticalNodes{4} = cat(2,senCriticalNodes{4},nodeID); 
    end

    % 5
    if isequal(union(sensorsCovTmp, sensorsGDFCMSATmp), intersect(sensorsCovTmp, sensorsGDFCMSATmp))
        isO5 = isO1;
    else if isequal(union(sensorsCovRetTmp, sensorsGDFCMSATmp), intersect(sensorsCovRetTmp, sensorsGDFCMSATmp))
            isO5 = isO2;
        else if isequal(union(sensorsNetMesRetTmp, sensorsGDFCMSATmp), intersect(sensorsNetMesRetTmp, sensorsGDFCMSATmp))
                isO5 = isO3;
            else if isequal(union(sensorsmCLASATmp, sensorsGDFCMSATmp), intersect(sensorsmCLASATmp, sensorsGDFCMSATmp))
                    isO5 = isO4;
                else
                    isO5 = isObs(adjTmp, sensorsGDFCMSATmp);
                end
            end
        end
    end
    senRob(5) = senRob(5) + isO5;
    if (~isO5)
        senCriticalNodes{5} = cat(2,senCriticalNodes{5},nodeID); 
    end

end
    
    
data.robustness = struct(...
    'methods', {methods},...
    'actRob', actRob,...
    'senRob', senRob,...
    'actRobPerc', actRob/numOfNodes,...
    'senRobPerc', senRob/numOfNodes,...
    'actCriticalNodes', {actCriticalNodes},...
    'senCriticalNodes', {senCriticalNodes});


end

