function [ data ] = matricesToStruct( Amatrix, Bmatrix, Cmatrix, Dmatrix, mesConfig )
%MATRICESTOSTRUCT creates a struct from the input matrices, which are
% desribe a linear system's A, B, C and D matrices. The mesConfig can be 
% generated by the getConfig function. The output data's structure
% is the following:
% data.
%    system.
%       describe.
%          A
%          B
%          C
%          D
%          effectGraph
%          Graph.
%             Type
%             Signature
%             FileName
%             Data
%             Index.
%                Names
%                Values
%                Exist
%                Properties
%       measure.
%          controllable
%          observable
%          numOfNodes
%          numOfEdges
%          density
%          diameter
%          degreeFreeman
%          degreeVariance
%          degreeRelative
%          rInIn
%          rInOut
%          rOutOut
%          rOutIn
%          percentLoops
%          percentSym
%    node.
%       centrality.
%          degreeIn
%          degreeOut
%          degree
%          degreeScott
%          inCloseness
%          outCloseness
%          closeness
%          betweenness
%          pageRank
%          in_inCorrel
%          in_outCorrel
%          out_outCorrel
%          out_inCorrel
%          control
%          observe
%       cluster.
%          driverNodes
%          driverSource
%          driverExternal
%          driverInternal
%          driverInaccess
%          sensorNodes
%          sensorSource
%          sensorExternal
%          sensorInternal
%          sensorInaccess
%          controlling
%          observing
%          driverSimilarity
%          sensorSimilarity
%          reachC
%          reachO
%    edge.
%       edges
%       betweenness
%       similarity
%       endpointSim
% ##################
% Example:
% ##################
% Inputs: all matrix could be sparse
%
% Amatrix=[2 1 0 0 0; 1 0 0 0 0; 1 1 3 3 1; 0 0 1 0 0; 0 0 0 1 0];
% Bmatrix=[1 0; 0 0; 0 1; 0 0; 0 0];
% Cmatrix=[0 1 0 0 0; 0 0 0 1 -1];
% Dmatrix=[0 0; 0 0];
% mesConfig=getConfig();  % NOCAD function
% ##################
% Function Calling:
% 
% [data] = matricesToStruct(Amatrix,Bmatrix,Cmatrix,Dmatrix,mesConfig)
% ##################
% Output:
%
% data = 
%     system: [1x1 struct]
%       node: [1x1 struct]
%       edge: [1x1 struct]
% ##################
%  The algorithm was implemented by Daniel Leitold 

if ~exist('isControllable', 'file')
   mfilepath=fileparts(which('matricesToStruct'));
   addpath(genpath([mfilepath,'\..\module2']));
end

% to unweighted
Amatrix=+(Amatrix~=0);
Bmatrix=+(Bmatrix~=0);
Cmatrix=+(Cmatrix~=0);
Dmatrix=+(Dmatrix~=0);

        %%%%%%%%%%%% system.describe %%%%%%%%%%%%%%
        describeSys=struct(...
           'A',{},...
           'B',{},...
           'C',{},...
           'D',{},...
           'effectGraph',{},...
           'Graph',{}...
           );
       if mesConfig.A
        describeSys(1).A=Amatrix;
       end
       if mesConfig.B
        describeSys(1).B=Bmatrix;
       end
       if mesConfig.C
        describeSys(1).C=Cmatrix;
       end
       if mesConfig.D
        describeSys(1).D=Dmatrix;
       end
       if mesConfig.effectGraph
        describeSys(1).effectGraph=+(Amatrix'~=0);
       end
       if mesConfig.Graph
        tmpStructGraph=struct(...
           'Type',{},...
           'Signature',{},...
           'FileName',{},...
           'Data',{},...
           'Index',{}...
           );
        tmpStructGraph(1).Type='Graph';
        tmpStructGraph(1).Signature='matricesToStruct';
        tmpStructGraph(1).FileName='';
        [tmpFrom,tmpTo,tmpWeight]=find(describeSys(1).effectGraph);
        tmpStructGraph(1).Data=[tmpFrom, tmpTo tmpWeight];
        tmpStructIndex=struct(...
           'Names',{},...
           'Values',{},...
           'Exist',{},...
           'Properties',{}...
           );
        tmpNumNodes=length(describeSys(1).effectGraph);
        tmpNames=cell(1,tmpNumNodes);
        for idxI=1:tmpNumNodes
            tmpNames{idxI}=num2str(idxI);
        end
        tmpStructIndex(1).Names=tmpNames;
        tmpStructIndex(1).Values=1:tmpNumNodes;
        tmpStructIndex(1).Exist=1;
        tmpStructIndex(1).Properties=[];
        tmpStructGraph(1).Index=tmpStructIndex;
        describeSys(1).Graph=tmpStructGraph;
        clear tmpStructGraph;
        clear tmpFrom;
        clear tmpTo;
        clear tmpWeight;
        clear tmpStructIndex;
        clear tmpNumNodes;
        clear tmpNames;
       end

        %%%%%%%%%%%% system.measure %%%%%%%%%%%%%%
        measureSys=struct(...
           'controllable',{},...
           'observable',{},...
           'numOfNodes',{},...
           'numOfEdges',{},...
           'density',{},...
           'diameter',{},...
           'degreeFreeman',{},...
           'degreeVariance',{},...
           'degreeRelative',{},...
           'rInIn',{},...
           'rInOut',{},...
           'rOutOut',{},...
           'rOutIn',{},...
           'percentLoops',{},...
           'percentSym',{}...
           );
       if mesConfig.controllable
        measureSys(1).controllable=isControllable(describeSys.A,describeSys.B);
       end
       if mesConfig.observable
        measureSys(1).observable=isObservable(describeSys.A,describeSys.C);
       end
       if mesConfig.numOfNodes
        measureSys(1).numOfNodes=numNodes(describeSys.effectGraph);
       end
       if mesConfig.numOfEdges
        measureSys(1).numOfEdges=numEdges(describeSys.effectGraph);
       end
       if mesConfig.density
        measureSys(1).density=density(describeSys.effectGraph);
       end
       if mesConfig.diameter
        measureSys(1).diameter=diameter(describeSys.effectGraph);
       end
       if mesConfig.degreeFreeman
        measureSys(1).degreeFreeman=degreeFreeman(describeSys.effectGraph);
       end
       if mesConfig.degreeVariance
        measureSys(1).degreeVariance=degreeVariance(describeSys.effectGraph);
       end
       if mesConfig.degreeRelative
        measureSys(1).degreeRelative=degreeRel(describeSys.A,describeSys.B,describeSys.C);
       end
       if mesConfig.pearsonR
        measureSys(1).rInIn=pearsonDir(describeSys.effectGraph, 1);
        measureSys(1).rInOut=pearsonDir(describeSys.effectGraph, 2);
        measureSys(1).rOutOut=pearsonDir(describeSys.effectGraph, 3);
        measureSys(1).rOutIn=pearsonDir(describeSys.effectGraph, 4);
       end
       if mesConfig.percentLoopsSym
        [measureSys(1).percentLoops, measureSys(1).percentSym]=...
            percentLoopSym(describeSys.effectGraph);
       end

        %%%%%%%%%%%% system %%%%%%%%%%%%%%
        system=struct(...
           'describe',{},...
           'measure',{}...
           );
        system(1).describe=describeSys;
        system(1).measure=measureSys;

        %%%%%%%%%%%% node.centrality %%%%%%%%%%%%%%
        centralityNode=struct(...
           'degreeIn',{},...
           'degreeOut',{},...
           'degree',{},...
           'degreeScott',{},...
           'inCloseness',{},...
           'outCloseness',{},...
           'closeness',{},...
           'betweenness',{},...
           'pageRank',{},...
           'in_inCorrel',{},...
           'in_outCorrel',{},...
           'out_outCorrel',{},...
           'out_inCorrel',{},...
           'control',{},...
           'observe',{}...
           );
       if mesConfig.degreeIn
        centralityNode(1).degreeIn=degreeIn(describeSys.effectGraph);
       end
       if mesConfig.degreeOut
        centralityNode(1).degreeOut=degreeOut(describeSys.effectGraph);
       end
       if mesConfig.degree
        centralityNode(1).degree=degree(describeSys.effectGraph);
       end
       if mesConfig.degreeScott
        centralityNode(1).degreeScott=degreeScott(describeSys.effectGraph);
       end
       if mesConfig.closeness
        [centralityNode(1).closeness,centralityNode(1).inCloseness,...
            centralityNode(1).outCloseness]=closenessCentrality(describeSys.effectGraph);
       end
       if mesConfig.betweennessN
        centralityNode(1).betweenness=nBetweenness(describeSys.effectGraph);
       end
       if mesConfig.pageRank
        centralityNode(1).pageRank=pageRank(describeSys.effectGraph);
       end
       if mesConfig.correl
        [centralityNode(1).in_inCorrel, centralityNode(1).in_outCorrel,...
            centralityNode(1).out_outCorrel, centralityNode(1).out_inCorrel]=...
            degreeCorrel(describeSys.effectGraph);
       end
       if mesConfig.control
        centralityNode(1).control=controlCentrality(describeSys.A,describeSys.B);
       end
       if mesConfig.observe
        centralityNode(1).observe=observeCentrality(describeSys.A,describeSys.C);
       end

        %%%%%%%%%%%% system.cluster %%%%%%%%%%%%%%
        clusterNode=struct(...
           'driverNodes',{},...
           'driverSource',{},...
           'driverExternal',{},...
           'driverInternal',{},...
           'driverInaccess',{},...
           'sensorNodes',{},...
           'sensorSource',{},...
           'sensorExternal',{},...
           'sensorInternal',{},...
           'sensorInaccess',{},...
           'controlling',{},...
           'observing',{},...
           'driverSimilarity',{},...
           'sensorSimilarity',{},...
           'Rc',{},...
           'Ro',{}...
           );
       if mesConfig.driverNodes
        clusterNode(1).driverNodes=driverNodes(describeSys.B);
       end
       if mesConfig.driverTypes
        [clusterNode(1).driverSource, clusterNode(1).driverExternal,...
            clusterNode(1).driverInternal, clusterNode(1).driverInaccess]=...
            driverType(describeSys.A, describeSys.B);
       end
       if mesConfig.sensorNodes
        clusterNode(1).sensorNodes=sensorNodes(describeSys.C);
       end
       if mesConfig.sensorTypes
        [clusterNode(1).sensorSource, clusterNode(1).sensorExternal,...
            clusterNode(1).sensorInternal, clusterNode(1).sensorInaccess]=...
            sensorType(describeSys.A, describeSys.C);
       end
       if mesConfig.controlling
        clusterNode(1).controlling=clusterControl(describeSys.A,describeSys.B);
       end
       if mesConfig.observing
        clusterNode(1).observing=clusterObserve(describeSys.A,describeSys.C);
       end
       if mesConfig.driverSimilarity
        clusterNode(1).driverSimilarity=driverSimilarity(describeSys.A, describeSys.B);
       end
       if mesConfig.sensorSimilarity
        clusterNode(1).sensorSimilarity=sensorSimilarity(describeSys.A, describeSys.C);
       end
       if mesConfig.reachC
        clusterNode(1).Rc=reachC(describeSys.A);
       end
       if mesConfig.reachO
        clusterNode(1).Ro=reachO(describeSys.A);
       end

        %%%%%%%%%%%% node %%%%%%%%%%%%%%
        node=struct(...
           'centrality',{},...
           'cluster',{}...
           );
        node(1).centrality=centralityNode;
        node(1).cluster=clusterNode;

        %%%%%%%%%%%% edge %%%%%%%%%%%%%%
        measureEdge=struct(...
           'edges',{},...
           'betweenness',{},...
           'similarity',{},...
           'endpointSim',{}...
           );
       if mesConfig.betweennessE
        measureEdge(1).betweenness=betweenness(describeSys.effectGraph);
       end
       if mesConfig.similarity
        [measureEdge(1).similarity, measureEdge(1).edges]=similarity(describeSys.effectGraph);
       end
       if mesConfig.endpointSim
        measureEdge(1).endpointSim=endpointSim(describeSys.effectGraph);
       end

        %%%%%%%%%%%% data %%%%%%%%%%%%%%
        data=struct(...
           'system',{},...
           'node',{},...
           'edge',{}...
           );
        data(1).system=system;
        data(1).node=node;
        data(1).edge=measureEdge;

end

